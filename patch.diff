diff --git a/app/src/main/java/com/emi/nwodcombat/adapters/MeritsAdapter.java b/app/src/main/java/com/emi/nwodcombat/adapters/MeritsAdapter.java
index 7870a90..08505f2 100644
--- a/app/src/main/java/com/emi/nwodcombat/adapters/MeritsAdapter.java
+++ b/app/src/main/java/com/emi/nwodcombat/adapters/MeritsAdapter.java
@@ -1,6 +1,7 @@
 package com.emi.nwodcombat.adapters;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.v7.widget.RecyclerView;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -13,8 +14,11 @@ import android.widget.TextView;
 
 import com.emi.nwodcombat.R;
 import com.emi.nwodcombat.rules.Rule;
+import com.emi.nwodcombat.tools.ArrayHelper;
 import com.squareup.otto.Bus;
 
+import java.util.Collections;
+
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import io.realm.OrderedRealmCollection;
@@ -30,10 +34,10 @@ public class MeritsAdapter extends RecyclerView.Adapter<MeritsAdapter.ViewHolder
 
     OrderedRealmCollection<Rule> merits;
 
-    public MeritsAdapter(OrderedRealmCollection<Rule> data, Context context, int idLayout, Bus bus) {
+    public MeritsAdapter(OrderedRealmCollection<Rule> data, Context context, Bus bus) {
         this.context = context;
         this.merits = data;
-        this.idLayout = idLayout;
+        this.idLayout = R.layout.row_merit;
         this.bus = bus;
     }
 
@@ -53,24 +57,45 @@ public class MeritsAdapter extends RecyclerView.Adapter<MeritsAdapter.ViewHolder
 
         holder.panelMeritValue.removeAllViews();
 
-        for (Integer level : merit.getLevels()) {
-            LinearLayout container = new LinearLayout(context);
+        int dpValue = 5;
+        float d = context.getResources().getDisplayMetrics().density;
+        int margin = (int)(dpValue * d);
+
+        LinearLayout.LayoutParams params = generateParams(margin, margin, margin, margin);
+
+        if (ArrayHelper.isIncreasingAndContiguous(merit.getLevels()) && merit.getLevels().size() > 1) {
+            LinearLayout container = createContainer(params);
+
+            holder.panelMeritValue.removeAllViews();
 
-            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
+            int min = Collections.min(merit.getLevels());
+            int max = Collections.max(merit.getLevels());
+
+            TextView txtOpen = new TextView(context);
+            txtOpen.setText("(");
+            
+            container.addView(txtOpen);
+            
+            for (int i = 0; i < min; i++) {
+                RadioButton rdb = new RadioButton(context);
+
+                rdb.setChecked(false);
 
-            int dpValue = 5;
-            float d = context.getResources().getDisplayMetrics().density;
-            int margin = (int)(dpValue * d);
+                rdb.setButtonDrawable(
+                    context.getResources().getDrawable(R.drawable.selector_points));
 
-            params.gravity = Gravity.CENTER_VERTICAL;
-            params.setMargins(margin, 0, 0, margin);
+                rdb.setClickable(false);
 
-            container.setLayoutParams(params);
+                container.addView(rdb);
+            }
 
-            container.setOrientation(LinearLayout.HORIZONTAL);
+            TextView txtTo = new TextView(context);
+            txtTo.setText("to");
+            txtTo.setLayoutParams(generateParams(margin, 0, margin, 0));
+            
+            container.addView(txtTo);
 
-            for (int i = 0; i < level; i++) {
+            for (int i = 0; i < max; i++) {
                 RadioButton rdb = new RadioButton(context);
 
                 rdb.setChecked(false);
@@ -83,8 +108,57 @@ public class MeritsAdapter extends RecyclerView.Adapter<MeritsAdapter.ViewHolder
                 container.addView(rdb);
             }
 
+            TextView txtClose = new TextView(context);
+            txtClose.setText(")");
+
+            container.addView(txtClose);
+
             holder.panelMeritValue.addView(container);
         }
+        else
+        {
+            LinearLayout container = createContainer(params);
+
+            holder.panelMeritValue.removeAllViews();
+
+            for (Integer level : merit.getLevels()) {
+                for (int i = 0; i < level; i++) {
+                    RadioButton rdb = new RadioButton(context);
+
+                    rdb.setChecked(false);
+
+                    rdb.setButtonDrawable(
+                        context.getResources().getDrawable(R.drawable.selector_points));
+
+                    rdb.setClickable(false);
+
+                    container.addView(rdb);
+                }
+
+                holder.panelMeritValue.addView(container);
+            }
+        }
+    }
+
+    @NonNull
+    private LinearLayout createContainer(LinearLayout.LayoutParams params) {
+        LinearLayout container = new LinearLayout(context);
+
+        container.setLayoutParams(params);
+
+        container.setOrientation(LinearLayout.HORIZONTAL);
+
+        return container;
+    }
+
+    @NonNull
+    private LinearLayout.LayoutParams generateParams(int left, int top, int right, int bottom) {
+        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
+            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
+
+        params.gravity = Gravity.CENTER_VERTICAL;
+        params.setMargins(left, top, right, bottom);
+        return params;
     }
 
     @Override
diff --git a/app/src/main/java/com/emi/nwodcombat/application/NwodCombatApplication.java b/app/src/main/java/com/emi/nwodcombat/application/NwodCombatApplication.java
index 65fb065..eb6926b 100644
--- a/app/src/main/java/com/emi/nwodcombat/application/NwodCombatApplication.java
+++ b/app/src/main/java/com/emi/nwodcombat/application/NwodCombatApplication.java
@@ -43,21 +43,51 @@ public class NwodCombatApplication extends Application {
     }
 
     private void generateRules() {
-        Rule rule = new Rule();
+        Rule dream = new Rule();
 
-        rule.setName("Dream");
-        rule.setHint("Your character can search for answers within her dreams.");
-        rule.setDescription("Your character can dig within her dreams for prophetic answers to primordial truths. She may enter her own dreams without a meditation roll when she sleeps, and if she has a basic understanding of something she wishes to divine from her dreams, you may use this Merit. Your character must sleep or meditate for at least four hours. Then, ask the Storyteller a yes or no question about the topic at hand. He must answer accurately, but can use \"maybe\" if the answer is truly neither yes or no. Depending on the answer, you may ask additional questions, up to your Dream Merit dots. You can use that many questions per chapter.");
+        dream.setName("Dream");
+        dream.setHint("Your character can search for answers within her dreams.");
+        dream.setDescription("Your character can dig within her dreams for prophetic answers to primordial truths. She may enter her own dreams without a meditation roll when she sleeps, and if she has a basic understanding of something she wishes to divine from her dreams, you may use this Merit. Your character must sleep or meditate for at least four hours. Then, ask the Storyteller a yes or no question about the topic at hand. He must answer accurately, but can use \"maybe\" if the answer is truly neither yes or no. Depending on the answer, you may ask additional questions, up to your Dream Merit dots. You can use that many questions per chapter.");
 
-        rule.addLevels(1, 2, 3, 4, 5);
+        dream.addLevels(1, 2, 3, 4, 5);
 
-        rule.addNamespaces("Awakened", "Merit");
+        dream.addNamespaces("Awakened", "Merit");
 
-        rule.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_WIT, Constants.FIELD_TYPE_INTEGER, 3)));
+        dream.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_WIT, Constants.FIELD_TYPE_INTEGER, 3)));
 
-        rule.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_COM, Constants.FIELD_TYPE_INTEGER, 3)));
+        dream.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_COM, Constants.FIELD_TYPE_INTEGER, 3)));
 
-        RulesEngine.addRule(rule);
+        RulesEngine.addRule(dream);
+
+        Rule trainedObserver = new Rule();
+
+        trainedObserver.setName("Trained Observer");
+        trainedObserver.setHint("Your character has spent years in the field, catching tiny details and digging for secrets.");
+        trainedObserver.setDescription("Your character has spent years in the field, catching tiny details and digging for secrets.");
+
+        trainedObserver.addLevels(1, 3);
+
+        trainedObserver.addNamespaces("Common", "Merit");
+
+        trainedObserver.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_WIT, Constants.FIELD_TYPE_INTEGER, 3)));
+
+        trainedObserver.addRequirement(Arrays.asList(Entry.newInstance(Constants.ATTR_COM, Constants.FIELD_TYPE_INTEGER, 3)));
+
+        RulesEngine.addRule(trainedObserver);
+
+        Rule commonSense = new Rule();
+
+        commonSense.setName("Common Sense");
+        commonSense.setHint("Your character has an exceptionally sound and rational mind.");
+        commonSense.setDescription("Your character has an exceptionally sound and rational mind. Within a moment\'s thought, she can weigh potential courses of action and outcomes.");
+
+        commonSense.addLevels(3);
+
+        commonSense.addNamespaces("Common", "Merit");
+
+        //parameters: Wits, Composure
+
+        RulesEngine.addRule(commonSense);
     }
 
     private void generateRealmVirtues() {
diff --git a/app/src/main/java/com/emi/nwodcombat/characterwizard/mvp/MeritsPresenter.java b/app/src/main/java/com/emi/nwodcombat/characterwizard/mvp/MeritsPresenter.java
index 63e87ac..9a91b49 100644
--- a/app/src/main/java/com/emi/nwodcombat/characterwizard/mvp/MeritsPresenter.java
+++ b/app/src/main/java/com/emi/nwodcombat/characterwizard/mvp/MeritsPresenter.java
@@ -18,7 +18,6 @@ import io.realm.RealmList;
 
 /**
  * Created by emiliano.desantis on 02/06/2016.
- * TODO UNTESTED - SPECIALTIES HAVE TO BE COMPLETED FIRST
  */
 public class MeritsPresenter {
     private final CharacterWizardModel model;
@@ -33,7 +32,7 @@ public class MeritsPresenter {
         this.model = model;
         this.view = view;
         this.context = view.getContext();
-        this.adapter = new MeritsAdapter(null, this.context, R.layout.row_merit, BusProvider.getInstance());
+        this.adapter = new MeritsAdapter(null, this.context, BusProvider.getInstance());
         setupWidgets();
     }
 
@@ -52,6 +51,7 @@ public class MeritsPresenter {
     public void onFragmentVisible(Events.MeritsFragmentLoaded event) {
         List<String> namespaces = new ArrayList<>();
 
+        namespaces.add("Common");
         namespaces.add("Awakened");
         namespaces.add("Merit");
 
diff --git a/app/src/main/java/com/emi/nwodcombat/rules/RulesEngine.java b/app/src/main/java/com/emi/nwodcombat/rules/RulesEngine.java
index 6c56fbb..631776e 100644
--- a/app/src/main/java/com/emi/nwodcombat/rules/RulesEngine.java
+++ b/app/src/main/java/com/emi/nwodcombat/rules/RulesEngine.java
@@ -47,23 +47,7 @@ public class RulesEngine {
                     boolean shouldAdd = false;
 
                     for (Entry requirement : requirementSet) {
-                        for (Entry entry : character.getEntries()) {
-
-                            // * ----> If the name matches, compare values
-                            if (validateKeys(entry, requirement)) {
-
-                                if (requirement.getType().equalsIgnoreCase(Constants.FIELD_TYPE_INTEGER)) {
-                                    // * ----> If the value is not enough, the character does not qualify for this resource
-                                    shouldAdd = compareIntegers(requirement, entry);
-                                }
-
-                                if (requirement.getType().equalsIgnoreCase(Constants.FIELD_TYPE_STRING)) {
-                                    shouldAdd = compareStrings(requirement, entry);
-                                }
-
-                                if (shouldAdd) break;
-                            }
-                        }
+                        shouldAdd = checkRequirement(character, requirement);
                     }
 
                     validations.add(shouldAdd);
@@ -78,6 +62,29 @@ public class RulesEngine {
         return result;
     }
 
+    private static boolean checkRequirement(Character character, Entry requirement) {
+        boolean shouldAdd = false;
+
+        for (Entry entry : character.getEntries()) {
+            // * ----> If the name matches, compare values
+            if (validateKeys(entry, requirement)) {
+
+                if (requirement.getType().equalsIgnoreCase(Constants.FIELD_TYPE_INTEGER)) {
+                    // * ----> If the value is not enough, the character does not qualify for this resource
+                    shouldAdd = compareIntegers(requirement, entry);
+                }
+
+                if (requirement.getType().equalsIgnoreCase(Constants.FIELD_TYPE_STRING)) {
+                    shouldAdd = compareStrings(requirement, entry);
+                }
+
+                if (shouldAdd) break;
+            }
+        }
+
+        return shouldAdd;
+    }
+
     private static boolean checkValidations(List<Boolean> validations) {
         for (Boolean validation : validations) {
             if (!validation) {
diff --git a/app/src/main/java/com/emi/nwodcombat/tools/ArrayHelper.java b/app/src/main/java/com/emi/nwodcombat/tools/ArrayHelper.java
index 6ff0403..5e378b3 100644
--- a/app/src/main/java/com/emi/nwodcombat/tools/ArrayHelper.java
+++ b/app/src/main/java/com/emi/nwodcombat/tools/ArrayHelper.java
@@ -36,7 +36,28 @@ public class ArrayHelper {
         }
     }
 
-// --Commented out by Inspection START (07/07/2016 01:13 PM):
+    // Source: http://stackoverflow.com/a/7143170
+    public static boolean isIncreasing(int[] arr) {
+        for(int i = 0 ; i < arr.length - 1; i++) { // finish at length - 1
+            if (arr[i] > arr[i+1]) {
+                return false; // found elements that are out of order - return false
+            }
+        }
+        return true; // nothing out of order found - return true
+    }
+
+    public static boolean isIncreasingAndContiguous(List<Integer> list) {
+        for (int i = 0; i < list.size() - 1; i++) {
+
+//            if (list.get(i) > list.get(i+1)) {
+            if (list.get(i) != list.get(i+1) - 1) {
+                return false; // found elements that are out of order - return false
+            }
+        }
+        return true; // nothing out of order found - return true
+    }
+
+    // --Commented out by Inspection START (07/07/2016 01:13 PM):
 //    public static <T extends Entry> Entry findEntry(List<T> list, final long id) {
 //        return Iterables.find(list, new Predicate<T>() {
 //            public boolean apply(T instance) {
diff --git a/app/src/main/res/layout/row_merit.xml b/app/src/main/res/layout/row_merit.xml
index 7e81da0..1fbe591 100644
--- a/app/src/main/res/layout/row_merit.xml
+++ b/app/src/main/res/layout/row_merit.xml
@@ -4,7 +4,7 @@
               android:layout_marginEnd="@dimen/spacing_normal"
               android:layout_marginStart="@dimen/spacing_normal"
               android:layout_width="match_parent"
-              android:layout_height="match_parent">
+              android:layout_height="wrap_content">
 
     <LinearLayout
         android:layout_width="match_parent"
