package com.emi.nwodcombat.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.emi.nwodcombat.model.db.CharacterPersonalityTraits;
import com.emi.nwodcombat.model.db.Nature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NATURE".
*/
public class NatureDao extends AbstractDao<Nature, Long> {

    public static final String TABLENAME = "NATURE";

    /**
     * Properties of entity Nature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdNature = new Property(0, Long.class, "idNature", true, "ID_NATURE");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property RegainOne = new Property(2, String.class, "RegainOne", false, "REGAIN_ONE");
        public final static Property RegainAll = new Property(3, String.class, "RegainAll", false, "REGAIN_ALL");
        public final static Property Description = new Property(4, String.class, "Description", false, "DESCRIPTION");
    };

    private Query<Nature> character_NatureListQuery;

    public NatureDao(DaoConfig config) {
        super(config);
    }
    
    public NatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NATURE\" (" + //
                "\"ID_NATURE\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idNature
                "\"NAME\" TEXT NOT NULL ," + // 1: Name
                "\"REGAIN_ONE\" TEXT," + // 2: RegainOne
                "\"REGAIN_ALL\" TEXT," + // 3: RegainAll
                "\"DESCRIPTION\" TEXT);"); // 4: Description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NATURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Nature entity) {
        stmt.clearBindings();
 
        Long idNature = entity.getIdNature();
        if (idNature != null) {
            stmt.bindLong(1, idNature);
        }
        stmt.bindString(2, entity.getName());
 
        String RegainOne = entity.getRegainOne();
        if (RegainOne != null) {
            stmt.bindString(3, RegainOne);
        }
 
        String RegainAll = entity.getRegainAll();
        if (RegainAll != null) {
            stmt.bindString(4, RegainAll);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(5, Description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Nature readEntity(Cursor cursor, int offset) {
        Nature entity = new Nature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idNature
            cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RegainOne
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RegainAll
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Nature entity, int offset) {
        entity.setIdNature(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setRegainOne(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRegainAll(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Nature entity, long rowId) {
        entity.setIdNature(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Nature entity) {
        if(entity != null) {
            return entity.getIdNature();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "natureList" to-many relationship of Character. */
    public List<Nature> _queryCharacter_NatureList(Long idCharacter) {
        synchronized (this) {
            if (character_NatureListQuery == null) {
                QueryBuilder<Nature> queryBuilder = queryBuilder();
                queryBuilder.join(CharacterPersonalityTraits.class, CharacterPersonalityTraitsDao.Properties.IdNature)
                    .where(CharacterPersonalityTraitsDao.Properties.IdCharacter.eq(idCharacter));
                character_NatureListQuery = queryBuilder.build();
            }
        }
        Query<Nature> query = character_NatureListQuery.forCurrentThread();
        query.setParameter(0, idCharacter);
        return query.list();
    }

}
