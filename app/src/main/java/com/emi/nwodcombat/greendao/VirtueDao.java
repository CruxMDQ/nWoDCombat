package com.emi.nwodcombat.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.emi.nwodcombat.model.db.CharacterVirtues;
import com.emi.nwodcombat.model.db.Virtue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIRTUE".
*/
public class VirtueDao extends AbstractDao<Virtue, Long> {

    public static final String TABLENAME = "VIRTUE";

    /**
     * Properties of entity Virtue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdVirtue = new Property(0, Long.class, "idVirtue", true, "ID_VIRTUE");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
    };

    private Query<Virtue> character_VirtueListQuery;

    public VirtueDao(DaoConfig config) {
        super(config);
    }
    
    public VirtueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIRTUE\" (" + //
                "\"ID_VIRTUE\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idVirtue
                "\"NAME\" TEXT NOT NULL );"); // 1: Name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIRTUE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Virtue entity) {
        stmt.clearBindings();
 
        Long idVirtue = entity.getIdVirtue();
        if (idVirtue != null) {
            stmt.bindLong(1, idVirtue);
        }
        stmt.bindString(2, entity.getName());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Virtue readEntity(Cursor cursor, int offset) {
        Virtue entity = new Virtue( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idVirtue
            cursor.getString(offset + 1) // Name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Virtue entity, int offset) {
        entity.setIdVirtue(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Virtue entity, long rowId) {
        entity.setIdVirtue(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Virtue entity) {
        if(entity != null) {
            return entity.getIdVirtue();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "virtueList" to-many relationship of Character. */
    public List<Virtue> _queryCharacter_VirtueList(Long idCharacter) {
        synchronized (this) {
            if (character_VirtueListQuery == null) {
                QueryBuilder<Virtue> queryBuilder = queryBuilder();
                queryBuilder.join(CharacterVirtues.class, CharacterVirtuesDao.Properties.IdVirtue)
                    .where(CharacterVirtuesDao.Properties.IdCharacter.eq(idCharacter));
                character_VirtueListQuery = queryBuilder.build();
            }
        }
        Query<Virtue> query = character_VirtueListQuery.forCurrentThread();
        query.setParameter(0, idCharacter);
        return query.list();
    }

}
