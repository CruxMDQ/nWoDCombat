package com.emi.nwodcombat.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.emi.nwodcombat.model.db.CharacterPersonalityTraits;
import com.emi.nwodcombat.model.db.Demeanor;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEMEANOR".
*/
public class DemeanorDao extends AbstractDao<Demeanor, Long> {

    public static final String TABLENAME = "DEMEANOR";

    /**
     * Properties of entity Demeanor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdDemeanor = new Property(0, Long.class, "idDemeanor", true, "ID_DEMEANOR");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
    };

    private Query<Demeanor> character_DemeanorListQuery;

    public DemeanorDao(DaoConfig config) {
        super(config);
    }
    
    public DemeanorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEMEANOR\" (" + //
                "\"ID_DEMEANOR\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idDemeanor
                "\"NAME\" TEXT NOT NULL );"); // 1: Name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEMEANOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Demeanor entity) {
        stmt.clearBindings();
 
        Long idDemeanor = entity.getIdDemeanor();
        if (idDemeanor != null) {
            stmt.bindLong(1, idDemeanor);
        }
        stmt.bindString(2, entity.getName());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Demeanor readEntity(Cursor cursor, int offset) {
        Demeanor entity = new Demeanor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idDemeanor
            cursor.getString(offset + 1) // Name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Demeanor entity, int offset) {
        entity.setIdDemeanor(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Demeanor entity, long rowId) {
        entity.setIdDemeanor(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Demeanor entity) {
        if(entity != null) {
            return entity.getIdDemeanor();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "demeanorList" to-many relationship of Character. */
    public List<Demeanor> _queryCharacter_DemeanorList(Long idCharacter) {
        synchronized (this) {
            if (character_DemeanorListQuery == null) {
                QueryBuilder<Demeanor> queryBuilder = queryBuilder();
                queryBuilder.join(CharacterPersonalityTraits.class, CharacterPersonalityTraitsDao.Properties.IdDemeanor)
                    .where(CharacterPersonalityTraitsDao.Properties.IdCharacter.eq(idCharacter));
                character_DemeanorListQuery = queryBuilder.build();
            }
        }
        Query<Demeanor> query = character_DemeanorListQuery.forCurrentThread();
        query.setParameter(0, idCharacter);
        return query.list();
    }

}
